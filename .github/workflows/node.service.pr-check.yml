name: "pr-check"

on:
  workflow_call:
    inputs:
      service-name:
        description: Name of the node service
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  build-and-test:
    runs-on: [self-hosted, builder]
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Amazon ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}/${{ inputs.service-name }}
          tags: type=sha,format=long,prefix=
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: services/${{ inputs.service-name }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_AUTH_TOKEN=${{ secrets.token }}
      - name: Build target base # need to be careful as targetting build and exporting cache may partially break docker build cache
        env:
          NODE_AUTH_TOKEN: ${{ secrets.token }}
        run: >
          docker buildx build
          --load
          --target base
          -t base:${{ github.sha }}
          --cache-from=type=gha
          --build-arg NODE_AUTH_TOKEN
          services/${{ inputs.service-name }}
      - name: Run unit test
        run: >
          docker run 
          --name base-test 
          base:${{ github.sha }} 
          npm run test:ci
      - name: Check dependencies
        if: always()
        run: >
          docker run
          --rm
          base:${{ github.sha }}
          npm run check-dependencies
